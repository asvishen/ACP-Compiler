arithmetic(op, left, right) ::= "<op> <left> <right>"

comparison(op, left, right) ::= "<left> <right> <op>"

if(cond, truestmt, elsestmt) ::= "@[<truestmt>] @[<elsestmt>] <cond> if!"

assign(name,value) ::= "@[<value>] "<name>" def"

ifwithelse(cond, truestmt) ::= "@[<truestmt>] <cond> if!"

funccall(params, name) ::= "<params> <name>!"

funcwithparam(name,params,block) ::= "@[ <param> <block> ] <name> def "

funcwoparam(name,block) ::= "@[ <block> ] <name> def "



SCOPEBEGINS
PUSH 10
PUSH "a"
ASSIGN
a SHOW

if format

INNERSCOPEBEGINS
"RESULT IS" SHOW
SCOPEENDS
INNERSCOPEBEGINS
"NOT TRUE" SHOW
SCOPEENDS
PUSH a
PUSH 5
PUSH EQU
PUSH IF

while format

SCOPEBEGINS
PUSH 5
PUSH "A"
ASSIGN
WHILE
INNERSCOPEBEGINS
"RUNNNING WHILE" SHOW
PUSH 1
PUSH A 
PUSH ADD
PUSH "A"
ASSIGN
PUSH 2
PUSH "B" 
ASSIGN

WHILE
INNERSCOPEBEGINS
"RUNNNING INNER WHILE" SHOW
PUSH 1
PUSH B 
PUSH ADD
PUSH "B"
ASSIGN
SCOPEENDS
INNERSCOPEBEGINS
PUSH B
PUSH 4
PUSH LET
SCOPEENDS


SCOPEENDS
INNERSCOPEBEGINS
PUSH A
PUSH 15
PUSH LET
SCOPEENDS
								  
								  
								  

